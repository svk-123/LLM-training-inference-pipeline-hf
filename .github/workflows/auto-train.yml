name: Auto Retrain Model
on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:
  
env:
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  DATASET_NAME: "vinoku89/svg-code-generation"
  MLFLOW_TRACKING_URI: "http://localhost:5000"

jobs:
  check-and-retrain:
    runs-on: self-hosted
    timeout-minutes: 480
    
    steps:
    - name: Setup project directory
      run: |
        cd /home/vino/ML_Projects/End-to-end-llm-pipeline-huggingface || exit 1
        echo "WORK_DIR=/home/vino/ML_Projects/End-to-end-llm-pipeline-huggingface" >> $GITHUB_ENV
        echo "Working in: $(pwd)"
        
    - name: Update code from repository
      run: |
        cd $WORK_DIR || exit 1
        git pull origin main || echo "Git pull failed or no changes"
        
    - name: Clean environment
      run: |
        cd $WORK_DIR || exit 1
        unset VIRTUAL_ENV
        unset CONDA_DEFAULT_ENV
        
    - name: Verify GPU
      run: |
        nvidia-smi || { echo "GPU not available"; exit 1; }
        
    - name: Install dependencies
      run: |
        cd $WORK_DIR || exit 1
        uv sync --reinstall || { echo "Failed to install dependencies"; exit 1; }
        
    - name: Verify MLflow server
      run: |
        curl -f http://localhost:5000/health || { echo "MLflow server not running"; exit 1; }
        
    - name: Verify HuggingFace token
      run: |
        [ -n "$HF_TOKEN" ] || { echo "HF_TOKEN not found"; exit 1; }
        
    - name: Check dataset updates
      id: check_updates
      run: |
        cd $WORK_DIR || exit 1
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Manual trigger detected - forcing training"
          echo "should_retrain=true" >> $GITHUB_OUTPUT
        else
          uv run --isolated python ./src/check_dataset_update.py || { echo "Dataset check failed"; exit 1; }
        fi
        
    - name: Train model
      if: steps.check_updates.outputs.should_retrain == 'true'
      run: |
        cd $WORK_DIR || exit 1
        echo "Training model in: $(pwd)"
        uv run --isolated python ./src/train_llm.py || { echo "Training failed"; exit 1; }
        
        # Verify model was created
        if [ -d "./models" ]; then
          echo "Model saved successfully:"
          find ./models -type f -name "*.safetensors" -o -name "*.bin" | head -5
        else
          echo "ERROR: Models directory not created"; exit 1;
        fi
        
    - name: Register model in MLflow
      if: steps.check_updates.outputs.should_retrain == 'true'
      run: |
        cd $WORK_DIR || exit 1
        uv run --isolated python ./src/register_model_mlflow.py || { echo "MLflow registration failed"; exit 1; }
        
    - name: Upload to Hugging Face
      if: steps.check_updates.outputs.should_retrain == 'true'
      run: |
        cd $WORK_DIR || exit 1
        uv run --isolated python ./src/upload_model_to_hf.py || { echo "HuggingFace upload failed"; exit 1; }
        
    - name: Verify final model location
      if: steps.check_updates.outputs.should_retrain == 'true'
      run: |
        cd $WORK_DIR || exit 1
        echo "Final model verification:"
        echo "Current directory: $(pwd)"
        if [ -d "./models/lora" ]; then
          echo "Latest models in ./models/lora:"
          ls -la ./models/lora/ | tail -3
          echo "Model files saved locally at: $WORK_DIR/models/lora/"
        fi
        
    - name: Log completion
      if: steps.check_updates.outputs.should_retrain == 'true'
      run: |
        echo "Training completed at $(date)"
        echo "Models saved to: $WORK_DIR/models/lora/"
        echo "MLflow: http://localhost:5000"
        
    - name: Log no training needed
      if: steps.check_updates.outputs.should_retrain != 'true'
      run: |
        echo "No dataset updates found. Skipping training at $(date)"
        
    - name: Cleanup GPU memory
      if: always()
      run: |
        cd $WORK_DIR || exit 1
        uv run --isolated python -c "
        try:
            import torch
            torch.cuda.empty_cache() if torch.cuda.is_available() else None
            print('GPU memory cleared')
        except: pass
        "