name: Auto Retrain Model

on:
  schedule:
    # Check for dataset updates every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch: # Manual trigger option
  
env:
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  DATASET_NAME: "vinoku89/svg-code-generation"
  MLFLOW_TRACKING_URI: "http://localhost:5000"

jobs:
  check-and-retrain:
    runs-on: self-hosted
    timeout-minutes: 480
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Clean environment
      run: |
        unset VIRTUAL_ENV
        unset CONDA_DEFAULT_ENV
        
    - name: Verify GPU
      run: |
        nvidia-smi || { echo "GPU not available"; exit 1; }
        
    - name: Install dependencies
      run: |
        uv sync --reinstall || { echo "Failed to install dependencies"; exit 1; }
        
    - name: Verify MLflow server
      run: |
        curl -f http://localhost:5000/health || { echo "MLflow server not running at localhost:5000"; exit 1; }
        echo "MLflow server is accessible"
        
    - name: Verify HuggingFace token
      run: |
        [ -n "$HF_TOKEN" ] || { echo "HF_TOKEN not found"; exit 1; }
        
    - name: Check dataset updates
      id: check_updates
      run: |
        uv run --isolated python ./src/check_dataset_update.py || { echo "Dataset check failed"; exit 1; }
        
    - name: Train model
      if: steps.check_updates.outputs.should_retrain == 'true'
      run: |
        echo "Starting model training..."
        uv run --isolated python ./src/train_llm.py || { echo "Model training failed"; exit 1; }
        echo "Model training completed"
        
    - name: Register model in MLflow
      if: steps.check_updates.outputs.should_retrain == 'true'
      run: |
        echo "Registering model in MLflow..."
        uv run --isolated python ./src/register_model_mlflow.py || { echo "MLflow registration failed"; exit 1; }
        echo "Model registered in MLflow"
        
    - name: Upload to Hugging Face
      if: steps.check_updates.outputs.should_retrain == 'true'
      run: |
        echo "Uploading to HuggingFace..."
        uv run --isolated python ./src/upload_model_to_hf.py || { echo "HuggingFace upload failed"; exit 1; }
        echo "Model uploaded to HuggingFace"
        
    - name: Log completion
      if: steps.check_updates.outputs.should_retrain == 'true'
      run: |
        echo "Training workflow completed successfully at $(date)"
        echo "Model trained, registered in MLflow, and uploaded to HuggingFace"
        
    - name: Log no training needed
      if: steps.check_updates.outputs.should_retrain != 'true'
      run: |
        echo "No dataset updates found. Skipping training at $(date)"
        
    - name: Cleanup GPU memory
      if: always()
      run: |
        uv run --isolated python -c "
        try:
            import torch
            torch.cuda.empty_cache() if torch.cuda.is_available() else None
            print('GPU memory cleared')
        except: pass
        "
        
    - name: Cleanup workspace
      if: always()
      run: |
        rm -rf ./tmp_models/ ./.cache/ 2>/dev/null || true